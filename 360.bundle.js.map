{"version":3,"file":"360.bundle.js","mappings":"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","sources":["webpack://portfolio_website/./node_modules/framer-motion/dist/es/value/use-combine-values.mjs","webpack://portfolio_website/./node_modules/framer-motion/dist/es/value/use-transform.mjs","webpack://portfolio_website/./src/Components/Paragraph.jsx","webpack://portfolio_website/./node_modules/framer-motion/dist/es/value/use-computed.mjs","webpack://portfolio_website/./node_modules/framer-motion/dist/es/utils/transform.mjs","webpack://portfolio_website/./node_modules/framer-motion/dist/es/value/use-motion-value.mjs"],"sourcesContent":["import { useMotionValue } from './use-motion-value.mjs';\nimport { useIsomorphicLayoutEffect } from '../utils/use-isomorphic-effect.mjs';\nimport { cancelFrame, frame } from '../frameloop/frame.mjs';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useIsomorphicLayoutEffect(() => {\n        const scheduleUpdate = () => frame.preRender(updateValue, false, true);\n        const subscriptions = values.map((v) => v.on(\"change\", scheduleUpdate));\n        return () => {\n            subscriptions.forEach((unsubscribe) => unsubscribe());\n            cancelFrame(updateValue);\n        };\n    });\n    return value;\n}\n\nexport { useCombineMotionValues };\n","import { transform } from '../utils/transform.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\nimport { useComputed } from './use-computed.mjs';\n\nfunction useTransform(input, inputRangeOrTransformer, outputRange, options) {\n    if (typeof input === \"function\") {\n        return useComputed(input);\n    }\n    const transformer = typeof inputRangeOrTransformer === \"function\"\n        ? inputRangeOrTransformer\n        : transform(inputRangeOrTransformer, outputRange, options);\n    return Array.isArray(input)\n        ? useListTransform(input, transformer)\n        : useListTransform([input], ([latest]) => transformer(latest));\n}\nfunction useListTransform(values, transformer) {\n    const latest = useConstant(() => []);\n    return useCombineMotionValues(values, () => {\n        latest.length = 0;\n        const numValues = values.length;\n        for (let i = 0; i < numValues; i++) {\n            latest[i] = values[i].get();\n        }\n        return transformer(latest);\n    });\n}\n\nexport { useTransform };\n","import React, { useRef } from 'react';\r\nimport { motion, useScroll, useTransform } from 'framer-motion';\r\n\r\nfunction Paragraph({ value }) {\r\n    const element = useRef(null);\r\n\r\n    const { scrollYProgress } = useScroll({\r\n        target: element,\r\n        offset: [\"start 0.9\", \"start 0.25\"]\r\n    });\r\n\r\n    const words = value.split(\" \");\r\n    return (\r\n        <p\r\n            className=\"flex flex-wrap bg-black text-[#fafafa] text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-7xl leading-tight sm:leading-loose md:leading-tight tracking-tighter font-matter mb-20 relative\"\r\n            ref={element}\r\n        >\r\n            {words.map((word, i) => {\r\n                const start = i / words.length;\r\n                const end = start + 1 / words.length;\r\n                return (\r\n                    <Word key={i} range={[start, end]} progress={scrollYProgress}>\r\n                        {word}\r\n                    </Word>\r\n                );\r\n            })}\r\n        </p>\r\n    );\r\n}\r\n\r\nconst Word = ({ range, children, progress }) => {\r\n    const characters = children.split(\"\");\r\n    const amount = range[1] - range[0];\r\n    const step = amount / characters.length;\r\n\r\n    return (\r\n        <span className=\"mt-1 sm:mt-2 md:mt-3 mr-1 sm:mr-2 md:mr-3 relative\">\r\n            {characters.map((char, i) => {\r\n                const start = range[0] + step * i;\r\n                const end = range[0] + step * (i + 1);\r\n                return (\r\n                    <Character key={i} range={[start, end]} progress={progress}>\r\n                        {char}\r\n                    </Character>\r\n                );\r\n            })}\r\n        </span>\r\n    );\r\n};\r\n\r\nconst Character = ({ children, range, progress }) => {\r\n    const opacity = useTransform(progress, range, [0.1, 1]); // Use a valid range\r\n\r\n    return (\r\n        <span>\r\n            <span className=\"absolute opacity-10\">{children}</span>\r\n            <motion.span style={{ opacity }}>{children}</motion.span>\r\n        </span>\r\n    );\r\n};\r\n\r\n\r\nexport default Paragraph;\r\n","import { collectMotionValues } from './index.mjs';\nimport { useCombineMotionValues } from './use-combine-values.mjs';\n\nfunction useComputed(compute) {\n    /**\n     * Open session of collectMotionValues. Any MotionValue that calls get()\n     * will be saved into this array.\n     */\n    collectMotionValues.current = [];\n    compute();\n    const value = useCombineMotionValues(collectMotionValues.current, compute);\n    /**\n     * Synchronously close session of collectMotionValues.\n     */\n    collectMotionValues.current = undefined;\n    return value;\n}\n\nexport { useComputed };\n","import { interpolate } from './interpolate.mjs';\n\nconst isCustomValueType = (v) => {\n    return v && typeof v === \"object\" && v.mix;\n};\nconst getMixer = (v) => (isCustomValueType(v) ? v.mix : undefined);\nfunction transform(...args) {\n    const useImmediate = !Array.isArray(args[0]);\n    const argOffset = useImmediate ? 0 : -1;\n    const inputValue = args[0 + argOffset];\n    const inputRange = args[1 + argOffset];\n    const outputRange = args[2 + argOffset];\n    const options = args[3 + argOffset];\n    const interpolator = interpolate(inputRange, outputRange, {\n        mixer: getMixer(outputRange[0]),\n        ...options,\n    });\n    return useImmediate ? interpolator(inputValue) : interpolator;\n}\n\nexport { transform };\n","import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.on(\"change\", setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n"],"names":["useCombineMotionValues","values","combineValues","value","updateValue","set","scheduleUpdate","preRender","subscriptions","map","v","on","forEach","unsubscribe","useListTransform","transformer","latest","length","numValues","i","get","Word","_ref2","range","children","progress","characters","split","step","React","className","char","start","end","Character","key","_ref3","opacity","input","inputRangeOrTransformer","outputRange","options","compute","current","undefined","useComputed","args","useImmediate","Array","isArray","argOffset","inputValue","inputRange","interpolator","interpolate","mixer","mix","isCustomValueType","transform","useTransform","motion","span","style","_ref","element","useRef","scrollYProgress","useScroll","target","offset","words","ref","word","useMotionValue","initial","isStatic","useContext","setLatest","useState","useEffect"],"sourceRoot":""}